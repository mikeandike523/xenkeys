{
  "version": 3,
  "sources": ["../../src/worklets/pitch-synth.worklet.ts"],
  "sourcesContent": ["// AudioWorklet: Generalized polyphonic pitch synth (temperament-agnostic).\n// Loads via: audioContext.audioWorklet.addModule('/worklets/pitch-synth.js')\n// Build: esbuild -> public/worklets/pitch-synth.js (ESM)\n//\n// Assumptions:\n// - Client logic computes frequencies (12EDO, 24EDO, N-EDO, just intonation, etc.)\n//   and sends them via postMessage({ type: 'noteOn', data: { id, freq, ... } }).\n// - This processor focuses on envelopes, simple waveforms, and mixing.\n//\n// TS notes:\n// - Include \"DOM\" and \"WebWorker\" libs in tsconfig for AudioWorklet types.\n// - ESM output (no IIFE). See the esbuild command you planned earlier.\n\nimport { type AudioParamDescriptor } from \"./extra-glue-types.d\";\n\nimport {\n  Envelope,\n  PitchSynthMessage,\n  Waveform\n} from \"@shared-types/audio-engine\";\n\ntype VoiceState = 'idle' | 'attack' | 'decay' | 'sustain' | 'release';\n\n// Some environments need this to placate TS about global `sampleRate` in worklets.\ndeclare const sampleRate: number;\n\n// --- RMS normalization config -------------------------------------------------\n\n/**\n * Number of sample points to measure per oscillator cycle when precomputing RMS.\n * Increase for more accuracy (slightly more module init cost).\n */\nconst RMS_SAMPLE_POINTS = 50;\n\n/**\n * Number of cycles to measure when precomputing RMS.\n * Useful for exotic/self-modulating periodic shapes to ensure stability.\n */\nconst RMS_NUM_CYCLES = 1;\n\nconst AVG_EXPECTED_SIMULTANEOUS_VOICES = 6;\n\n// --- Utilities ---------------------------------------------------------------\n\nconst clamp = (x: number, lo: number, hi: number) => Math.max(lo, Math.min(hi, x));\n\nfunction secondsToSamples(sec: number, sr: number): number {\n  // at least 1 sample to avoid division-by-zero edge cases\n  return Math.max(1, Math.floor(Math.max(0, sec) * sr));\n}\n\n/**\n * Generalized power-sine oscillator: |sin(2\u03C0\u00B7phase)|^n * sign(sin(2\u03C0\u00B7phase)).\n */\nfunction powerSin(phase: number, n: number): number {\n  const s = Math.sin(2 * Math.PI * phase);\n  return Math.pow(Math.abs(s), n) * Math.sign(s);\n}\n\n/**\n * Pure oscillator output for a given phase in [0,1).\n * Keep in sync with the switch in PolyVoice.process (or use this helper there).\n */\nfunction oscSample(w: Waveform, phase: number): number {\n  switch (w) {\n    case 'square':\n      return phase < 0.5 ? 1 : -1;\n    case 'triangle':\n      return 1 - 4 * Math.abs(phase - 0.5);\n    case 'sawtooth':\n      return 2 * phase - 1;\n    case 'power2':\n      return powerSin(phase, 2);\n    case 'power3':\n      return powerSin(phase, 3);\n    case 'power4':\n      return powerSin(phase, 4);\n    case 'selfmod0.1':\n      return Math.sin(2 * Math.PI * phase + 0.1 * 2 * Math.PI * Math.sin(2 * Math.PI * phase));\n    case 'selfmod0.2':\n      return Math.sin(2 * Math.PI * phase + 0.2 * 2 * Math.PI * Math.sin(2 * Math.PI * phase));\n    case 'selfmod0.3':\n      return Math.sin(2 * Math.PI * phase + 0.3 * 2 * Math.PI * Math.sin(2 * Math.PI * phase));\n    case 'sine':\n    default:\n      return Math.sin(2 * Math.PI * phase);\n  }\n}\n\n/**\n * Compute RMS of a periodic waveform by uniform sampling.\n */\nfunction computeWaveformRMS(w: Waveform, pointsPerCycle: number, cycles: number): number {\n  const totalPoints = Math.max(1, Math.floor(pointsPerCycle)) * Math.max(1, Math.floor(cycles));\n  let acc = 0;\n  for (let i = 0; i < totalPoints; i++) {\n    const phase = (i / pointsPerCycle) % 1; // wraps each cycle\n    const s = oscSample(w, phase);\n    acc += s * s;\n  }\n  return Math.sqrt(acc / totalPoints);\n}\n\n/**\n * Build a normalization gain map so that each waveform\u2019s RMS matches triangle\u2019s RMS.\n * If you prefer a different target (e.g. sine), change targetWave.\n */\nconst KNOWN_WAVEFORMS: Waveform[] = [\n  'sine',\n  'square',\n  'triangle',\n  'sawtooth',\n  'power2',\n  'power3',\n  'power4',\n  'selfmod0.1',\n  'selfmod0.2',\n  'selfmod0.3',\n];\n\nconst targetWave: Waveform = 'triangle';\nconst targetRMS = computeWaveformRMS(targetWave, RMS_SAMPLE_POINTS, RMS_NUM_CYCLES);\n\nconst NORMALIZATION_GAIN: Record<string, number> = (() => {\n  const map: Record<string, number> = {};\n  for (const w of KNOWN_WAVEFORMS) {\n    const r = computeWaveformRMS(w, RMS_SAMPLE_POINTS, RMS_NUM_CYCLES);\n    // Fallback to 1 if RMS is degenerate (shouldn\u2019t happen with these shapes).\n    map[w] = r > 0 ? (targetRMS / r) : 1;\n  }\n  return map;\n})();\n\n// --- Voice -------------------------------------------------------------------\n\nclass PolyVoice {\n  private sr: number;\n  private _freq = 440;\n  private _samples = 0;\n\n  private _state: VoiceState = 'idle';\n\n  private envSamples = 0;       // samples within current stage\n  private attackSamples = 0;\n  private decaySamples = 0;\n  private releaseSamples = 0;\n  private sustainLevel = 0;\n\n  public noteId = 0;\n  public waveform: Waveform = 'sine';\n\n  constructor(sr: number) {\n    this.sr = sr;\n  }\n\n  public get state(): VoiceState {\n    return this._state;\n  }\n\n  noteOn(freq: number, id: number, env: Envelope): void {\n    this._freq = freq;\n    this.noteId = id;\n    this._state = 'attack';\n    this.envSamples = 0;\n    this._samples = 0;\n\n    this.attackSamples = secondsToSamples(env.attack, this.sr);\n    this.decaySamples = secondsToSamples(env.decay, this.sr);\n    this.releaseSamples = secondsToSamples(env.release, this.sr);\n    this.sustainLevel = clamp(env.sustain, 0, 1);\n  }\n\n  noteOff(id: number): void {\n    if (this._state !== 'idle' && this.noteId === id && this._state !== 'release') {\n      this._state = 'release';\n      this.envSamples = 0;\n    }\n  }\n\n  forceRelease(): void {\n    if (this._state !== 'idle') {\n      this._state = 'release';\n      this.envSamples = 0;\n    }\n  }\n\n  setWaveform(w: Waveform): void {\n    this.waveform = w;\n  }\n\n  process(): number {\n    // Envelope\n    let envAmp = 0;\n\n    switch (this._state) {\n      case 'attack': {\n        envAmp = this.envSamples / this.attackSamples;\n        if (this.envSamples++ >= this.attackSamples) {\n          this._state = 'decay';\n          this.envSamples = 0;\n        }\n        break;\n      }\n      case 'decay': {\n        const t = this.envSamples / this.decaySamples;\n        envAmp = 1 + (this.sustainLevel - 1) * t; // linear decay\n        if (this.envSamples++ >= this.decaySamples) {\n          this._state = 'sustain';\n          this.envSamples = 0;\n        }\n        break;\n      }\n      case 'sustain': {\n        envAmp = this.sustainLevel;\n        break;\n      }\n      case 'release': {\n        const t = this.envSamples / this.releaseSamples;\n        envAmp = this.sustainLevel * (1 - t);\n        if (this.envSamples++ >= this.releaseSamples) {\n          this._state = 'idle';\n          this.envSamples = 0;\n          this.noteId = 0;\n          return 0;\n        }\n        break;\n      }\n      default:\n        return 0;\n    }\n\n    // Phase & waveform\n    const t = (this._samples * this._freq) / this.sr;\n    const phase = t - Math.floor(t); // [0,1)\n\n    // Base oscillator sample\n    let sample = oscSample(this.waveform, phase);\n\n    // Apply precomputed normalization gain so each waveform matches triangle RMS.\n    const norm = NORMALIZATION_GAIN[this.waveform] ?? 1;\n    sample *= norm;\n\n    this._samples++;\n    return sample * envAmp;\n  }\n}\n\n// --- Processor ---------------------------------------------------------------\n\ntype ParameterMap = {\n  volume: Float32Array;\n};\n\nconst DEFAULT_ENV: Envelope = {\n  attack: 0.01,\n  decay: 0.1,\n  sustain: 0.7,\n  release: 0.5,\n};\n\nclass PitchSynthProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors(): AudioParamDescriptor[] {\n    return [\n      { name: 'volume', defaultValue: 0.8, minValue: 0, maxValue: 1, automationRate: 'a-rate' },\n    ];\n  }\n\n  private voices: PolyVoice[] = [];\n  private baseEnvelope: Envelope = { ...DEFAULT_ENV };\n  private waveform: Waveform = 'sine';\n\n  constructor() {\n    super();\n\n    // Default polyphony: 16\n    this.resizeVoices(16);\n\n    this.port.onmessage = (e: MessageEvent<PitchSynthMessage>) => {\n      const msg = e.data;\n      switch (msg.type) {\n        case 'noteOn': {\n          const env: Envelope = {\n            attack: msg.data.envelope?.attack ?? this.baseEnvelope.attack,\n            decay: msg.data.envelope?.decay ?? this.baseEnvelope.decay,\n            sustain: msg.data.envelope?.sustain ?? this.baseEnvelope.sustain,\n            release: msg.data.envelope?.release ?? this.baseEnvelope.release,\n          };\n          const v = this.findFreeOrSteal();\n          v.setWaveform(this.waveform);\n          v.noteOn(msg.data.freq, msg.data.id, env);\n          break;\n        }\n        case 'noteOff': {\n          const { id } = msg.data;\n          this.voices.forEach((v) => v.noteOff(id));\n          break;\n        }\n        case 'waveform': {\n          this.waveform = msg.data;\n          // Apply immediately to ringing voices\n          this.voices.forEach((v) => v.setWaveform(this.waveform));\n          break;\n        }\n        case 'setEnvelope': {\n          this.baseEnvelope = {\n            attack: msg.data.attack ?? this.baseEnvelope.attack,\n            decay: msg.data.decay ?? this.baseEnvelope.decay,\n            sustain: msg.data.sustain ?? this.baseEnvelope.sustain,\n            release: msg.data.release ?? this.baseEnvelope.release,\n          };\n          break;\n        }\n        case 'allNotesOff': {\n          this.voices.forEach((v) => v.forceRelease());\n          break;\n        }\n        case 'setPolyphony': {\n          const n = Math.max(1, Math.floor(msg.data.voices));\n          this.resizeVoices(n);\n          break;\n        }\n      }\n    };\n  }\n\n  private resizeVoices(n: number): void {\n    if (n === this.voices.length) return;\n    if (n > this.voices.length) {\n      const add = n - this.voices.length;\n      for (let i = 0; i < add; i++) this.voices.push(new PolyVoice(sampleRate));\n    } else {\n      // Shrink: release extra voices first to avoid clicks\n      for (let i = n; i < this.voices.length; i++) this.voices[i].forceRelease();\n      this.voices.length = n;\n    }\n    // Ensure current waveform applies to all\n    this.voices.forEach((v) => v.setWaveform(this.waveform));\n  }\n\n  private findFreeOrSteal(): PolyVoice {\n    const free = this.voices.find((v) => v.state === 'idle');\n    if (free) return free;\n    // Simple voice stealing: reuse voice 0\n    return this.voices[0];\n  }\n\n  process(\n    _inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: ParameterMap\n  ): boolean {\n    const output = outputs[0];\n    if (!output || output.length === 0) return true;\n\n    const frameCount = output[0].length;\n\n    // Ensure all channels same length\n    for (let ch = 1; ch < output.length; ch++) {\n      if (output[ch].length !== frameCount) {\n        throw new Error('All outputs must have the same length');\n      }\n    }\n\n    const vol = parameters.volume;\n    for (let i = 0; i < frameCount; i++) {\n      let mix = 0;\n      for (let v = 0; v < this.voices.length; v++) {\n        mix += this.voices[v].process();\n      }\n      const gain = vol.length > 1 ? vol[i] : vol[0];\n\n      // Keep a little headroom since multiple voices can stack\n      const s = mix * gain * (1.0/AVG_EXPECTED_SIMULTANEOUS_VOICES);\n\n      for (let ch = 0; ch < output.length; ch++) {\n        output[ch][i] = s;\n      }\n    }\n\n    return true;\n  }\n}\n\nregisterProcessor('pitch-synth', PitchSynthProcessor);\n"],
  "mappings": "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",
  "names": ["RMS_SAMPLE_POINTS", "RMS_NUM_CYCLES", "AVG_EXPECTED_SIMULTANEOUS_VOICES", "clamp", "x", "lo", "hi", "secondsToSamples", "sec", "sr", "powerSin", "phase", "n", "oscSample", "w", "computeWaveformRMS", "pointsPerCycle", "cycles", "totalPoints", "acc", "s", "KNOWN_WAVEFORMS", "targetWave", "targetRMS", "NORMALIZATION_GAIN", "map", "r", "PolyVoice", "__publicField", "freq", "id", "env", "envAmp", "t", "sample", "norm", "DEFAULT_ENV", "PitchSynthProcessor", "e", "msg", "v", "add", "i", "free", "_inputs", "outputs", "parameters", "output", "frameCount", "ch", "vol", "mix", "gain"]
}
